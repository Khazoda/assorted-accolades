package com.seacroak.assorted_accolades.util;

import net.minecraft.util.math.Direction;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.util.shape.VoxelShapes;

public class VoxelShapeUtils {

    static public VoxelShape generateDefaultShape() {
        VoxelShape shape = VoxelShapes.empty();
        shape = VoxelShapes.union(
                VoxelShapes.cuboid(0.125, 0, 0.125, 0.875, 0.3125, 0.875),
                VoxelShapes.cuboid(0.1875, 0.3125, 0.1875, 0.8125, 0.375, 0.8125),
                VoxelShapes.cuboid(0.1875, 0.0625, 0.09375, 0.8125, 0.25, 0.125)
        );
        return shape;
    }

    // Takes an initial Direction, a target Direction and the VoxelShape data, and
    // returns a VoxelShape that's been rotated

    // WARNING: Cache data generated by this method at Block instantiation,
    // otherwise it can cause a HUGE amount of frame lag

    public static VoxelShape rotateShape(Direction from, Direction to, VoxelShape shape) {
        VoxelShape[] buffer = new VoxelShape[]{shape, VoxelShapes.empty()};

        int times = (to.getHorizontal() - from.getHorizontal() + 4) % 4;
        for (int i = 0; i < times; i++) {
            buffer[0].forEachBox((minX, minY, minZ, maxX, maxY, maxZ) -> buffer[1] = VoxelShapes.union(buffer[1],
                    VoxelShapes.cuboid(1 - maxZ, minY, minX, 1 - minZ, maxY, maxX)));
            buffer[0] = buffer[1];
            buffer[1] = VoxelShapes.empty();
        }
        return buffer[0];
    }

    /* Calculates all cardinally directed block shapes for caching */
    public static VoxelShape[] calculateBlockShapes(VoxelShape blockShape) {
        VoxelShape[] output = {
                blockShape,
                rotateShape(Direction.NORTH, Direction.EAST, blockShape),
                rotateShape(Direction.NORTH, Direction.SOUTH, blockShape),
                rotateShape(Direction.NORTH, Direction.WEST, blockShape)
        };
        return output;
    }

    /* Used to abbreviate net.minecraft.block.AbstractBlock.getOutlineShape */
    public static VoxelShape getSidedOutlineShape(Direction direction, VoxelShape blockShape, VoxelShape[] blockShapes) {
        switch (direction) {
            case NORTH: {
                return blockShapes[0];
            }
            case EAST: {
                return blockShapes[1];
            }
            case SOUTH: {
                return blockShapes[2];
            }
            case WEST: {
                return blockShapes[3];
            }
            default:
                return blockShape;
        }
    }
}
